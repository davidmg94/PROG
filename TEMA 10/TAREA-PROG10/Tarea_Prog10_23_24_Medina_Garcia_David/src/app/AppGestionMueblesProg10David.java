package app;

import controladores.ConexionBD;
import modelos.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import patrones.Patron;

/**
 *
 * @author David Medina Garcia
 */
public class AppGestionMueblesProg10David extends javax.swing.JFrame {

    // Declarar dos objetos : uno de la clase Mueble y otro de la clase Venta
    // Se van a utilizar en todas las clases, se declaran como globales para no tener que pasárselo
    // como entrada a todos los métodos
    Mueble m;
    Venta v;

    // Se abre la conexión con el usuario local llamado 
    // PROG10 y clave 123 a la base de datos local XEPDB1
    ConexionBD con = abrirConexion();

    /**
     * Creates new form InicioArticulos
     */
    public AppGestionMueblesProg10David() {
        initComponents();
        setLocationRelativeTo(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfListaVentas = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtListaVentas = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtTotalVentas = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtIdMueble = new javax.swing.JTextField();
        txtDescripMueble = new javax.swing.JTextField();
        txtPrecioUnitario = new javax.swing.JTextField();
        btnInsertarMueble = new javax.swing.JButton();
        btnModificarMueble = new javax.swing.JButton();
        btnEliminarMueble = new javax.swing.JButton();
        btnBuscarMueble = new javax.swing.JButton();
        btnLimpiarMueble = new javax.swing.JButton();
        txtUnidadesExistentes = new javax.swing.JTextField();
        btnListarMuebles = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtIdVenta = new javax.swing.JTextField();
        txtNombreCli = new javax.swing.JTextField();
        btnInsertarVenta = new javax.swing.JButton();
        btnBuscarVenta = new javax.swing.JButton();
        btnModificarVenta = new javax.swing.JButton();
        btnEliminarVenta = new javax.swing.JButton();
        btnLimpiarVenta = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtUnidadesVend = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtIdMuebleVenta = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        jfListaVentas.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jfListaVentas.setMinimumSize(new java.awt.Dimension(900, 450));

        jtListaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID VENTA", "NOMBRE CLIENTE", "DESCRIP. MUEBLE", "PRECIO($)  ", "UNIDADES VEND.", "TOTAL VENTA($) "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtListaVentas.setMinimumSize(new java.awt.Dimension(850, 500));
        jtListaVentas.setPreferredSize(new java.awt.Dimension(850, 500));
        jScrollPane1.setViewportView(jtListaVentas);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Listado de Ventas");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("TOTAL VENDIDO:");

        txtTotalVentas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtTotalVentas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalVentasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jfListaVentasLayout = new javax.swing.GroupLayout(jfListaVentas.getContentPane());
        jfListaVentas.getContentPane().setLayout(jfListaVentasLayout);
        jfListaVentasLayout.setHorizontalGroup(
            jfListaVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jfListaVentasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jfListaVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jfListaVentasLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(txtTotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 539, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(jfListaVentasLayout.createSequentialGroup()
                .addGap(337, 337, 337)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jfListaVentasLayout.setVerticalGroup(
            jfListaVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jfListaVentasLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jfListaVentasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtTotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TAREA PROG10-GESTIÓN DE MUEBLES");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MUEBLES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Id Mueble");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Descripción");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Precio Unitario");

        btnInsertarMueble.setBackground(new java.awt.Color(255, 204, 204));
        btnInsertarMueble.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnInsertarMueble.setForeground(new java.awt.Color(51, 51, 255));
        btnInsertarMueble.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/añadir3.jpg"))); // NOI18N
        btnInsertarMueble.setText("Insertar");
        btnInsertarMueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarMuebleActionPerformed(evt);
            }
        });

        btnModificarMueble.setBackground(new java.awt.Color(255, 204, 204));
        btnModificarMueble.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnModificarMueble.setForeground(new java.awt.Color(51, 51, 255));
        btnModificarMueble.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/modificar1.jpg"))); // NOI18N
        btnModificarMueble.setText("Modificar");
        btnModificarMueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarMuebleActionPerformed(evt);
            }
        });

        btnEliminarMueble.setBackground(new java.awt.Color(255, 204, 204));
        btnEliminarMueble.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEliminarMueble.setForeground(new java.awt.Color(51, 51, 255));
        btnEliminarMueble.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconoError.jpg"))); // NOI18N
        btnEliminarMueble.setText("Eliminar");
        btnEliminarMueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarMuebleActionPerformed(evt);
            }
        });

        btnBuscarMueble.setBackground(new java.awt.Color(255, 204, 204));
        btnBuscarMueble.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBuscarMueble.setForeground(new java.awt.Color(51, 51, 255));
        btnBuscarMueble.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda.jpg"))); // NOI18N
        btnBuscarMueble.setText("Buscar");
        btnBuscarMueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarMuebleActionPerformed(evt);
            }
        });

        btnLimpiarMueble.setBackground(new java.awt.Color(255, 204, 204));
        btnLimpiarMueble.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLimpiarMueble.setForeground(new java.awt.Color(51, 51, 255));
        btnLimpiarMueble.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar-logo-peque.png"))); // NOI18N
        btnLimpiarMueble.setText("Limpiar");
        btnLimpiarMueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarMuebleActionPerformed(evt);
            }
        });

        btnListarMuebles.setBackground(new java.awt.Color(255, 204, 204));
        btnListarMuebles.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnListarMuebles.setForeground(new java.awt.Color(51, 51, 255));
        btnListarMuebles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/listarInforme_1.jpg"))); // NOI18N
        btnListarMuebles.setText("LISTAR MUEBLE");
        btnListarMuebles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarMueblesActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Unidades Existentes");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnInsertarMueble)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBuscarMueble)
                        .addGap(36, 36, 36)
                        .addComponent(btnModificarMueble)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarMueble)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarMueble))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtIdMueble, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescripMueble, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtUnidadesExistentes, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnListarMuebles)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBuscarMueble, btnEliminarMueble, btnInsertarMueble, btnLimpiarMueble, btnModificarMueble});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdMueble, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescripMueble, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnidadesExistentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnListarMuebles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertarMueble)
                    .addComponent(btnBuscarMueble)
                    .addComponent(btnModificarMueble)
                    .addComponent(btnEliminarMueble)
                    .addComponent(btnLimpiarMueble))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel5});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBuscarMueble, btnEliminarMueble, btnInsertarMueble, btnLimpiarMueble, btnListarMuebles, btnModificarMueble});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtDescripMueble, txtIdMueble, txtPrecioUnitario, txtUnidadesExistentes});

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "VENTAS MUEBLES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 51, 204))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel9.setText("Id Venta");

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        jLabel10.setText("Nombre Cliente");

        txtNombreCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreCliActionPerformed(evt);
            }
        });

        btnInsertarVenta.setBackground(new java.awt.Color(204, 255, 204));
        btnInsertarVenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnInsertarVenta.setForeground(new java.awt.Color(51, 51, 255));
        btnInsertarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/añadir3.jpg"))); // NOI18N
        btnInsertarVenta.setText("Insertar");
        btnInsertarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarVentaActionPerformed(evt);
            }
        });

        btnBuscarVenta.setBackground(new java.awt.Color(204, 255, 204));
        btnBuscarVenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBuscarVenta.setForeground(new java.awt.Color(51, 51, 255));
        btnBuscarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda.jpg"))); // NOI18N
        btnBuscarVenta.setText("Buscar");
        btnBuscarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVentaActionPerformed(evt);
            }
        });

        btnModificarVenta.setBackground(new java.awt.Color(204, 255, 204));
        btnModificarVenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnModificarVenta.setForeground(new java.awt.Color(51, 51, 255));
        btnModificarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/modificar1.jpg"))); // NOI18N
        btnModificarVenta.setText("Modificar");
        btnModificarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarVentaActionPerformed(evt);
            }
        });

        btnEliminarVenta.setBackground(new java.awt.Color(204, 255, 204));
        btnEliminarVenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnEliminarVenta.setForeground(new java.awt.Color(51, 51, 255));
        btnEliminarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/iconoError.jpg"))); // NOI18N
        btnEliminarVenta.setText("Eliminar");
        btnEliminarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarVentaActionPerformed(evt);
            }
        });

        btnLimpiarVenta.setBackground(new java.awt.Color(255, 204, 204));
        btnLimpiarVenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLimpiarVenta.setForeground(new java.awt.Color(51, 51, 255));
        btnLimpiarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar-logo-peque.png"))); // NOI18N
        btnLimpiarVenta.setText("Limpiar");
        btnLimpiarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarVentaActionPerformed(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(204, 0, 102));
        btnSalir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salir.png"))); // NOI18N
        btnSalir.setText("SALIR");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Unidades Vendidas");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Id Mueble");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombreCli, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUnidadesVend, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdMuebleVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtIdVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnInsertarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscarVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificarVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiarVenta)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBuscarVenta, btnEliminarVenta, btnInsertarVenta, btnLimpiarVenta, btnModificarVenta});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtNombreCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUnidadesVend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdMuebleVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnInsertarVenta, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBuscarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnModificarVenta)
                        .addComponent(btnEliminarVenta)
                        .addComponent(btnLimpiarVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBuscarVenta, btnEliminarVenta, btnInsertarVenta, btnLimpiarVenta, btnModificarVenta});

        jLabel4.setBackground(new java.awt.Color(204, 255, 204));
        jLabel4.setFont(new java.awt.Font("Seravek", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("TAREA PROG10");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel4.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarVentaActionPerformed
        // Verificar si el campo de texto para el ID de la venta está vacío
        if (verificarCamposVacios(txtIdVenta)) {
            return;
        }

        // Obtener el ID de venta ingresado por el usuario desde el campo de texto
        int idVenta = Integer.parseInt(txtIdVenta.getText());

        // Leer la venta desde la base de datos utilizando el ID obtenido
        v = con.leerVenta(idVenta);
        // Verificar si la venta no se encontró en la base de datos
        if (v == null) {
            // Mostrar un mensaje de error indicando que la venta no está registrada
            JOptionPane.showMessageDialog(this, "La venta con ID: " + idVenta + ", no está registrada.");
            // Colocar el foco en el campo de texto para el ID de mueble
            txtIdVenta.requestFocus();
            return;
        }
        // almacenamos la informacion en un objeto mueble que utilizaremos para modificar las ventas
        m = con.leerMueble(v.getMueble().getIdMueble());
        // Visualizar la información de la venta en la interfaz gráfica
        visualizarVenta();
    }//GEN-LAST:event_btnBuscarVentaActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // Solicitar confirmación al usuario antes de salir del programa
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Quieres salir del programa?",
                "Salir",
                JOptionPane.YES_NO_OPTION);

        // Verificar si el usuario confirmó salir del programa
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Cerrar la conexión con la base de datos
            con.cerrar();
            // Salir del programa
            System.exit(0);
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtNombreCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreCliActionPerformed

// TODO add your handling code here:
    }//GEN-LAST:event_txtNombreCliActionPerformed

    private void btnLimpiarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarVentaActionPerformed
        // limpia el formulario de ventas
        limpiarFormularioVenta();

    }//GEN-LAST:event_btnLimpiarVentaActionPerformed

    private void btnLimpiarMuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarMuebleActionPerformed
        // limpia el formulario de muebles
        limpiarFormularioMueble();

    }//GEN-LAST:event_btnLimpiarMuebleActionPerformed

    private void btnInsertarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarVentaActionPerformed
        // Verificar si alguno de los campos necesarios para la inserción está vacío
        if (verificarCamposVacios(txtIdVenta, txtNombreCli, txtUnidadesVend, txtIdMuebleVenta)) {
            return;
        }

        // Validar nuevamente los campos para garantizar que se ingresen datos válidos
        if (!validarCampoVenta(txtIdVenta, "El campo 'ID Venta' debe ser un numero entero de 1-4 digitos.")
                || !validarCampoNombreCli(txtNombreCli, "El campo 'Nombre Cliente' no cumple con el patrón necesario.")
                || !validarCampos(txtUnidadesVend, "El campo 'Unidades Vendidas' debe ser un numero entero de 1-4 digitos.", true)
                || !validarCampos(txtIdMuebleVenta, "El campo 'ID Mueble' debe ser un numero entero de 1-4 digitos.", true)) {
            return;
        }

        // Obtener los valores de los campos de texto necesarios para la inserción
        int idVenta = Integer.parseInt(txtIdVenta.getText());
        int unidadesVendidas = Integer.parseInt(txtUnidadesVend.getText());
        int idMuebleVenta = Integer.parseInt(txtIdMuebleVenta.getText());
        int unidadesExistentes = con.leerUnidadesExistentes(idMuebleVenta);

        // Leer la venta y el mueble desde la base de datos utilizando los IDs obtenidos
        v = con.leerVenta(idVenta);
        m = con.leerMueble(idMuebleVenta);

        // Verificar si la venta ya está registrada
        if (v != null) {
            JOptionPane.showMessageDialog(this, "La venta con ID: " + idVenta + ", ya está registrada.");
            txtIdMueble.requestFocus();
            return;
        } else if (m == null) { // Verificar si el mueble no está registrado
            JOptionPane.showMessageDialog(this, "El mueble con ID: " + idMuebleVenta + ", no está registrado.");
            txtIdMueble.requestFocus();
            return;
        } else if (unidadesVendidas > unidadesExistentes) { // Verificar si se intentan vender más unidades de las disponibles
            JOptionPane.showMessageDialog(this, "Las unidades vendidas no pueden ser mayores a las unidades existentes.");
            txtUnidadesVend.requestFocus();
            return;
        }

        // Llenar la venta con los datos del mueble y la cantidad vendida
        llenarVenta(m);
        // Insertar la venta en la base de datos
        con.insertarVenta(v);
        // Actualizar las unidades existentes del mueble después de la venta
        con.actualizarUnidadesExistentesDeVentaNueva(unidadesVendidas, idMuebleVenta);
        // Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(this, "Venta registrada.");
        // Limpiar el formulario de venta
        limpiarFormularioVenta();
        // Colocar el foco en el campo de texto para el ID de venta
        txtIdVenta.requestFocus();

    }//GEN-LAST:event_btnInsertarVentaActionPerformed

    private void btnInsertarMuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarMuebleActionPerformed

        // Verifica si algún campo obligatorio está vacío
        if (verificarCamposVacios(txtIdMueble, txtDescripMueble, txtPrecioUnitario, txtUnidadesExistentes)) {
            return; // Si algún campo está vacío, no procede con la inserción y retorna
        }

        // Valida cada campo individualmente
        if (!validarCampos(txtIdMueble, "El campo 'ID Mueble' debe ser un numero entero de 1-4 digitos.", true)
                || !validarCampoDescripcion(txtDescripMueble, "El campo 'Descripcion' no cumple con el patrón necesario.")
                || !validarCampos(txtPrecioUnitario, "El campo 'Precio Unitario' debe ser un numero de 1-6 digitos con 2 decimales.", false)
                || !validarCampos(txtUnidadesExistentes, "El campo 'Unidades Existentes' debe ser un numero entero de 1-4 digitos.", true)) {
            return; // Si alguna validación falla, no procede con la inserción y retorna
        }

        // Convierte el texto del campo de ID Mueble a un entero
        int idMueble = Integer.parseInt(txtIdMueble.getText());

        // Lee el mueble desde la base de datos usando el ID
        m = con.leerMueble(idMueble);
        if (m != null) {
            // Si el mueble ya existe, muestra un mensaje de error y retorna
            JOptionPane.showMessageDialog(this, "El mueble con ID: " + idMueble + ", ya esta registrado.");
            txtIdMueble.requestFocus();
            return;
        }

        // Llena el objeto de mueble con la información de los campos
        llenarMueble();
        // Inserta el mueble en la base de datos
        con.insertarMueble(m);

        // Muestra un mensaje de éxito y limpia el formulario
        JOptionPane.showMessageDialog(this, "Mueble registrado.");
        limpiarFormularioMueble();
        // Pone el foco en el campo de ID Mueble nuevamente
        txtIdMueble.requestFocus();
    }//GEN-LAST:event_btnInsertarMuebleActionPerformed

    private void btnBuscarMuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarMuebleActionPerformed
        // Verificar si el campo de texto para el ID del mueble está vacío
        if (verificarCamposVacios(txtIdMueble)) {
            return;
        }

        // Obtener el ID del mueble desde el campo de texto
        int idMueble = Integer.parseInt(txtIdMueble.getText());

        // Leer el mueble desde la base de datos utilizando el ID obtenido
        m = con.leerMueble(idMueble);

        // Verificar si el mueble no está registrado
        if (m == null) {
            JOptionPane.showMessageDialog(this, "El mueble con ID: " + idMueble + ", no está registrado.");
            txtIdMueble.requestFocus();
            return;
        }

        // Visualizar los detalles del mueble
        visualizarMueble();

    }//GEN-LAST:event_btnBuscarMuebleActionPerformed

    private void btnModificarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarVentaActionPerformed
        // cogemos el id almacenado en el mueble creado al darle al boton buscar 
        //(lo usaremos mas adelante)
        int idMuebleAnterior = m.getIdMueble();
        // cogemos las ventas existentes en el objeto venta 
        // (si cambiamos el mueble de la venta(distinto idMueble), usaremos esta variable)
        int unidadesVendidasAnterior = v.getUnidadesVendidas();

        // Verificar si alguno de los campos necesarios para modificar la venta está vacío
        if (verificarCamposVacios(txtIdVenta, txtNombreCli, txtUnidadesVend, txtIdMuebleVenta)) {
            return;
        }

        // Validar nuevamente los campos para garantizar que se ingresen datos válidos
        if (!validarCampoVenta(txtIdVenta, "El campo 'ID Venta' debe ser un numero entero de 4 digitos.")
                || !validarCampoNombreCli(txtNombreCli, "El campo 'Nombre Cliente' no cumple con el patrón necesario.")
                || !validarCampos(txtUnidadesVend, "El campo 'Unidades Vendidas' debe ser un numero entero de 4 digitos.", true)
                || !validarCampos(txtIdMuebleVenta, "El campo 'ID Mueble' debe ser un numero entero de 4 digitos.", true)) {
            return;
        }

        // Obtener los valores de los campos de texto necesarios para modificar la venta
        int idVenta = Integer.parseInt(txtIdVenta.getText());
        int idMuebleVenta = Integer.parseInt(txtIdMuebleVenta.getText());
        String nombreCliente = txtNombreCli.getText().toUpperCase();
        int unidadesVendidas = Integer.parseInt(txtUnidadesVend.getText());

        // almacenar las unidades existentes del idMueble en la base de datos.
        int unidadesExistentes = con.leerUnidadesExistentes(idMuebleVenta);

        // Leer la venta y el mueble desde la base de datos utilizando los IDs obtenidos
        v = con.leerVenta(idVenta);
        m = con.leerMueble(idMuebleVenta);

        // Verificar si la venta no está registrada
        if (v == null) {
            JOptionPane.showMessageDialog(this, "La venta con ID: " + idVenta + ", no está registrada.");
            txtIdMueble.requestFocus();
            return;
        } else if (m == null) { // Verificar si el mueble no está registrado
            JOptionPane.showMessageDialog(this, "El mueble con ID: " + idMuebleVenta + ", no está registrado.");
            txtIdMueble.requestFocus();
            return;
        } else if (unidadesVendidas > unidadesExistentes) { // Verificar si se intentan vender más unidades de las disponibles
            JOptionPane.showMessageDialog(this, "Las unidades vendidas no pueden ser mayores a las unidades existentes.");
            txtUnidadesVend.requestFocus();
            return;
        }

        if (idMuebleAnterior == idMuebleVenta) {
            // Si el identificador del mueble anterior es igual al identificador del mueble a vender,
            // significa que se está vendiendo el mismo tipo de mueble que se registró anteriormente.

            // Actualizar las unidades existentes del mueble después de la venta
            con.actualizarUnidadesExistentesDeVentaRegistradaMismoMueble(unidadesVendidas, idMuebleVenta, idVenta);
        } else {
            // Si los identificadores son diferentes, significa que se está vendiendo un mueble distinto al que se registró anteriormente.

            // Si cambia el objeto de la venta (equivocacion del pedido), 
            // hay que recuperar las unidades del objeto que no se ha vendido
            // Actualizar las unidades existentes del mueble después de la venta
            con.actualizarUnidadesExistentesDeVentaRegistradaDistintoMueble(unidadesVendidas, unidadesVendidasAnterior, idMuebleVenta, idMuebleAnterior, idVenta);
            // Asignar el nuevo ID del mueble a la venta y actualizar el mueble en la venta
            m.setIdMueble(idMuebleVenta);
            v.setMueble(m);
        }

        // Modificar la venta en la base de datos con los nuevos datos
        con.modificarVenta(idVenta, nombreCliente, unidadesVendidas, v);
        JOptionPane.showMessageDialog(this, "Venta modificada correctamente.");

        // Leer nuevamente la venta desde la base de datos para obtener los datos nuevos y limpiar el formulario
        v = con.leerVenta(idVenta);
        limpiarFormularioVenta();
        txtIdVenta.requestFocus();
    }//GEN-LAST:event_btnModificarVentaActionPerformed

    private void btnModificarMuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarMuebleActionPerformed
        // Verificar si alguno de los campos necesarios para modificar el mueble está vacío
        if (verificarCamposVacios(txtIdMueble, txtDescripMueble, txtPrecioUnitario, txtUnidadesExistentes)) {
            return;
        }

        // Validar nuevamente los campos para garantizar que se ingresen datos válidos
        if (!validarCampos(txtIdMueble, "El campo 'ID Mueble' debe ser un numero entero de 1-4 digitos.", true)
                || !validarCampoDescripcion(txtDescripMueble, "El campo 'Descripcion' no cumple con el patrón necesario.")
                || !validarCampos(txtPrecioUnitario, "El campo 'Precio Unitario' debe ser un numero de 1-6 digitps con 2 decimales.", false)
                || !validarCampos(txtUnidadesExistentes, "El campo 'Unidades Existentes' debe ser un numero entero de 1-4 digitos.", true)) {
            return;
        }

        // Obtener los valores de los campos de texto necesarios para modificar el mueble
        int idMueble = Integer.parseInt(txtIdMueble.getText());
        String descripcion = txtDescripMueble.getText().toUpperCase();
        int unidadesExistentes = Integer.parseInt(txtUnidadesExistentes.getText());
        float precio = Float.parseFloat(txtPrecioUnitario.getText());

        // Leer el mueble desde la base de datos utilizando el ID obtenido
        m = con.leerMueble(idMueble);

        // Verificar si el mueble no está registrado
        if (m == null) {
            JOptionPane.showMessageDialog(this, "El mueble con ID: " + idMueble + ", no está registrado.");
            txtIdMueble.requestFocus();
            return;
        }

        // Modificar el mueble en la base de datos con los nuevos datos
        con.modificarMueble(idMueble, descripcion, precio, unidadesExistentes);
        JOptionPane.showMessageDialog(this, "Mueble modificado correctamente.");

        // Limpiar el formulario después de la modificación y establecer el foco en el campo de ID de mueble
        limpiarFormularioMueble();
        txtIdMueble.requestFocus();
    }//GEN-LAST:event_btnModificarMuebleActionPerformed

    private void btnEliminarMuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarMuebleActionPerformed
        // Verificar si el campo de texto para el ID del mueble está vacío
        if (verificarCamposVacios(txtIdMueble)) {
            return;
        }

        // Obtener el ID del mueble desde el campo de texto
        int idMueble = Integer.parseInt(txtIdMueble.getText());

        // Leer el mueble desde la base de datos utilizando el ID obtenido
        m = con.leerMueble(idMueble);

        // Verificar si el mueble no está registrado
        if (m == null) {
            JOptionPane.showMessageDialog(this, "El mueble con ID: " + idMueble + " no está registrado.");
            txtIdMueble.requestFocus();
            return;
        }

        // Verificar si hay ventas asociadas al mueble
        if (con.muebleEnRegistroVentas(idMueble) > 0) {
            JOptionPane.showMessageDialog(this, "El mueble con ID: " + idMueble + " no puede ser borrado porque tiene ventas asociadas.");
            txtIdMueble.requestFocus();
            return;
        }

        // Solicitar confirmación para eliminar el mueble
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Desea realmente eliminar este mueble?",
                "Borrar Mueble",
                JOptionPane.YES_NO_OPTION
        );

        // Verificar si se confirmó la eliminación del mueble
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Eliminar el mueble de la base de datos
            con.eliminarMueble(idMueble);
            JOptionPane.showMessageDialog(this, "Mueble eliminado con éxito.");
            limpiarFormularioMueble();
        } else {
            JOptionPane.showMessageDialog(this, "No se eliminó el mueble.");
        }

        // Establecer el foco en el campo de ID de mueble después de la operación
        txtIdMueble.requestFocus();


    }//GEN-LAST:event_btnEliminarMuebleActionPerformed

    private void btnEliminarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarVentaActionPerformed
        // Verificar si el campo de texto para el ID de la venta está vacío
        if (verificarCamposVacios(txtIdVenta)) {
            return;
        }
        int idVenta = Integer.parseInt(txtIdVenta.getText());

        // Leer la venta desde la base de datos utilizando el ID obtenido
        v = con.leerVenta(idVenta);

        // Verificar si la venta no está registrada
        if (v == null) {
            JOptionPane.showMessageDialog(this, "La venta con ID: " + idVenta + ", no está registrada.");
            txtIdMueble.requestFocus();
            return;
        }

        // Solicitar confirmación para eliminar la venta
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Desea realmente eliminar esta venta?",
                "Borrar Venta",
                JOptionPane.YES_NO_OPTION
        );

        // Verificar si se confirmó la eliminación de la venta
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Si el usuario confirma la eliminación de la venta:

            // Obtener el ID del mueble vendido y las unidades vendidas
            int idMuebleVenta = v.getMueble().getIdMueble();
            int unidadesVend = v.getUnidadesVendidas();
            // Eliminar la venta de la base de datos
            con.eliminarVenta(idVenta, idMuebleVenta, unidadesVend);
            JOptionPane.showMessageDialog(this, "Venta eliminada con éxito.");
            limpiarFormularioVenta();
        } else {
            JOptionPane.showMessageDialog(this, "No se eliminó la venta.");
        }

        // Establecer el foco en el campo de ID de venta después de la operación
        txtIdVenta.requestFocus();

    }//GEN-LAST:event_btnEliminarVentaActionPerformed

    private void btnListarMueblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarMueblesActionPerformed
        // Limpiar la tabla de la lista de ventas
        limpiarTabla(jtListaVentas);

        // Mostrar la ventana de la lista de ventas y establecer su tamaño y posición
        jfListaVentas.setVisible(true);
        jfListaVentas.setSize(850, 500);
        jfListaVentas.setLocationRelativeTo(this);

        // Llenar la tabla de la lista de ventas con los datos de la base de datos
        con.llenarTabla(jtListaVentas);
        con.mostrarVentasConsola();
        // Obtener el total vendido desde la base de datos
        double totalVentas = con.totalVendido();

        // Formatear el total de ventas con dos lugares decimales
        String formattedTotal = String.format("%.2f", totalVentas);

        // Mostrar el total de ventas en el componente txtTotalVentas
        txtTotalVentas.setText(formattedTotal + "$");
    }//GEN-LAST:event_btnListarMueblesActionPerformed

    private void txtTotalVentasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalVentasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalVentasActionPerformed

    // Método para limpiar una tabla
    private void limpiarTabla(JTable jt) {
        // Obtener el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) jt.getModel();
        // Eliminar todas las filas de la tabla
        model.setRowCount(0);
    }

    // Método para llenar los datos de una venta
    private void llenarVenta(Mueble m) {
        // Crear una nueva venta
        v = new Venta();

        // Establecer los datos de la venta desde los campos de texto del formulario
        v.setIdVenta(Integer.parseInt(txtIdVenta.getText()));
        v.setNombreCliente(txtNombreCli.getText().toUpperCase());
        v.setUnidadesVendidas(Integer.parseInt(txtUnidadesVend.getText()));
        v.setMueble(m);
    }

    // Método para llenar los datos de un mueble
    private void llenarMueble() {
        // Crear una nueva mueble
        m = new Mueble();
        // Establecer los datos del mueble desde los campos de texto del formulario
        m.setIdMueble(Integer.parseInt(txtIdMueble.getText()));
        m.setDescripMueble(txtDescripMueble.getText().toUpperCase());
        m.setPrecioUnitario(Float.parseFloat(txtPrecioUnitario.getText()));
        m.setUnidadesExistentes(Integer.parseInt(txtUnidadesExistentes.getText()));
    }

    // Método para visualizar los datos de un mueble en los campos de texto del formulario
    private void visualizarMueble() {
        txtIdMueble.setText(String.valueOf(m.getIdMueble()));
        txtDescripMueble.setText(m.getDescripMueble());
        txtPrecioUnitario.setText(String.valueOf(m.getPrecioUnitario()));
        txtUnidadesExistentes.setText(String.valueOf(m.getUnidadesExistentes()));
    }

    // Método para visualizar los datos de una venta en los campos de texto del formulario
    private void visualizarVenta() {
        txtIdVenta.setText(String.valueOf(v.getIdVenta()));
        txtNombreCli.setText(v.getNombreCliente());
        txtUnidadesVend.setText(String.valueOf(v.getUnidadesVendidas()));
        txtIdMuebleVenta.setText(String.valueOf(v.getMueble().getIdMueble()));
    }

    // Método para limpiar el formulario de venta
    private void limpiarFormularioVenta() {
        txtIdVenta.setText("");
        txtNombreCli.setText("");
        txtUnidadesVend.setText("");
        txtIdMuebleVenta.setText("");
    }

    // Método para limpiar el formulario de mueble
    private void limpiarFormularioMueble() {
        txtIdMueble.setText("");
        txtDescripMueble.setText("");
        txtPrecioUnitario.setText("");
        txtUnidadesExistentes.setText("");
    }

    // Método para verificar si hay campos de texto vacíos en el formulario
    private boolean verificarCamposVacios(JTextField... campos) {
        for (JTextField campo : campos) {
            if (campo.getText().isBlank()) {
                JOptionPane.showMessageDialog(this, "Existen campos vacíos en el formulario.");
                campo.requestFocus();
                return true;
            }
        }
        return false;
    }

    // Método para validar el campo idVenta
    private boolean validarCampoVenta(JTextField campo, String mensajeError) {
        if (!Patron.patronNumeroEnteroLongitud6(campo.getText())) {
            JOptionPane.showMessageDialog(this, mensajeError);
            campo.requestFocus();
            return false;
        }
        return true;
    }

    // Método para validar el campo nombre cliente
    private boolean validarCampoNombreCli(JTextField campo, String mensajeError) {
        if (!Patron.patronAlfabetico(campo.getText())) {
            JOptionPane.showMessageDialog(this, mensajeError);
            campo.requestFocus();
            return false;
        }
        return true;
    }

    // Método para validar campo descripcion
    private boolean validarCampoDescripcion(JTextField campo, String mensajeError) {
        if (!Patron.patronAlfanumerico(campo.getText())) {
            JOptionPane.showMessageDialog(this, mensajeError);
            campo.requestFocus();
            return false;
        }
        return true;
    }

    // Método para validar los campos idMueble, precio unitario
    private boolean validarCampos(JTextField campo, String mensajeError, boolean esNumeroEntero) {
        if (esNumeroEntero && !Patron.patronNumeroEnteroLongitud4(campo.getText())) {
            JOptionPane.showMessageDialog(this, mensajeError);
            campo.requestFocus();
            return false;
        }
        if (!esNumeroEntero && !Patron.patronNumeroReal(campo.getText())) {
            JOptionPane.showMessageDialog(this, mensajeError);
            campo.requestFocus();
            return false;
        }
        return true;
    }

    // Método para abrir una conexión a la base de datos
    ConexionBD abrirConexion() {
        // Crea la conexión del usuario prog10 y clave 123 a la BBDD : XEPDP1
        ConexionBD conexion = new ConexionBD("oracle", "localhost", "XEPDB1", "PROG10", "123");
        return conexion;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppGestionMueblesProg10David.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AppGestionMueblesProg10David().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarMueble;
    private javax.swing.JButton btnBuscarVenta;
    private javax.swing.JButton btnEliminarMueble;
    private javax.swing.JButton btnEliminarVenta;
    private javax.swing.JButton btnInsertarMueble;
    private javax.swing.JButton btnInsertarVenta;
    private javax.swing.JButton btnLimpiarMueble;
    private javax.swing.JButton btnLimpiarVenta;
    private javax.swing.JButton btnListarMuebles;
    private javax.swing.JButton btnModificarMueble;
    private javax.swing.JButton btnModificarVenta;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFrame jfListaVentas;
    private javax.swing.JTable jtListaVentas;
    private javax.swing.JTextField txtDescripMueble;
    private javax.swing.JTextField txtIdMueble;
    private javax.swing.JTextField txtIdMuebleVenta;
    private javax.swing.JTextField txtIdVenta;
    private javax.swing.JTextField txtNombreCli;
    private javax.swing.JTextField txtPrecioUnitario;
    private javax.swing.JTextField txtTotalVentas;
    private javax.swing.JTextField txtUnidadesExistentes;
    private javax.swing.JTextField txtUnidadesVend;
    // End of variables declaration//GEN-END:variables
}
