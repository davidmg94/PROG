package app;

import enumTipoMueble.TipoMueble;
import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelos.Mueble;
import patrones.Patron;

/**
 *
 * @author David Medina Garcia
 */
public class AppGestionMuebles extends javax.swing.JFrame {

    // declaracion de lista
    ArrayList<Mueble> listaMuebles = new ArrayList<>();
    //declaracion de objeto
    Mueble mueble = new Mueble();

    /**
     * Creates new form AppGestionMuebles
     */
    public AppGestionMuebles() {
        initComponents();
        setLocationRelativeTo(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtCodigoMueble = new javax.swing.JTextField();
        txtDescripcion = new javax.swing.JTextField();
        txtPrecioUnitario = new javax.swing.JTextField();
        cmbTipoMueble = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtUnidadesMinimas = new javax.swing.JTextField();
        txtUnidadesAlmacen = new javax.swing.JTextField();
        txtTotalVentas = new javax.swing.JTextField();
        btnLimpiarDatos = new javax.swing.JButton();
        btnInsertar = new javax.swing.JToggleButton();
        btnEliminar = new javax.swing.JToggleButton();
        btnModificar = new javax.swing.JToggleButton();
        btnLimpiarTodos = new javax.swing.JToggleButton();
        btnVisualizarTodos = new javax.swing.JToggleButton();
        btnSalir = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListaMuebles = new javax.swing.JTable();
        btnBuscar = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("DESCRIPCION");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("CODIGO MUEBLE");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("PRECIO UNITARIO");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("TIPO MUEBLE");

        txtCodigoMueble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoMuebleActionPerformed(evt);
            }
        });

        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });

        txtPrecioUnitario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioUnitarioActionPerformed(evt);
            }
        });

        cmbTipoMueble.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione uno", "COLEGIOS", "DESPACHO", "HOGAR" }));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("UNIDADES MINIMAS");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("UNIDADES ALMACEN");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("TOTAL VENTA");

        txtUnidadesMinimas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnidadesMinimasActionPerformed(evt);
            }
        });

        txtUnidadesAlmacen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnidadesAlmacenActionPerformed(evt);
            }
        });

        txtTotalVentas.setEditable(false);

        btnLimpiarDatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/limpiar.png"))); // NOI18N
        btnLimpiarDatos.setText("Limpiar Datos");
        btnLimpiarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarDatosActionPerformed(evt);
            }
        });

        btnInsertar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/agregar.png"))); // NOI18N
        btnInsertar.setText("Añadir");
        btnInsertar.setMinimumSize(new java.awt.Dimension(131, 31));
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setMinimumSize(new java.awt.Dimension(131, 31));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/modificar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setMinimumSize(new java.awt.Dimension(131, 31));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnLimpiarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/limpiar.png"))); // NOI18N
        btnLimpiarTodos.setText("Limpair Todos");
        btnLimpiarTodos.setMinimumSize(new java.awt.Dimension(131, 31));
        btnLimpiarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTodosActionPerformed(evt);
            }
        });

        btnVisualizarTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/lista-de-la-compra.png"))); // NOI18N
        btnVisualizarTodos.setText("Visualizar Todos");
        btnVisualizarTodos.setMinimumSize(new java.awt.Dimension(131, 31));
        btnVisualizarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarTodosActionPerformed(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(0, 51, 204));
        btnSalir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/salir.png"))); // NOI18N
        btnSalir.setText("SALIR");
        btnSalir.setMinimumSize(new java.awt.Dimension(131, 31));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jTableListaMuebles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO MUEBLE", "DESCRIPCION", "PRECIO UNITARIO", "UNIDADES MINIMAS", "UNIDADES MAXIMAS", "TIPO MUEBLE", "TOTAL VENTAS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableListaMuebles.setGridColor(new java.awt.Color(102, 102, 102));
        jTableListaMuebles.setShowGrid(true);
        jScrollPane1.setViewportView(jTableListaMuebles);

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buscar.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCodigoMueble)
                            .addComponent(txtDescripcion)
                            .addComponent(txtPrecioUnitario)
                            .addComponent(cmbTipoMueble, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUnidadesMinimas, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUnidadesAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addComponent(btnLimpiarDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(30, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnLimpiarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnVisualizarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnLimpiarDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCodigoMueble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(txtUnidadesMinimas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(txtUnidadesAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotalVentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(txtPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(cmbTipoMueble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVisualizarTodos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // Mostramos un cuadro de diálogo de confirmación para preguntar si se quiere salir del programa
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Quieres salir del programa?",
                "Salir",
                JOptionPane.YES_NO_OPTION);

        // Verificamos la respuesta del usuario
        if (confirmacion == JOptionPane.YES_OPTION) {
            // Si la respuesta es sí, cerramos el programa
            System.exit(0);
        }
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        if (txtCodigoMueble.getText().isBlank()
                || txtPrecioUnitario.getText().isBlank()
                || txtDescripcion.getText().isBlank()
                || txtUnidadesAlmacen.getText().isBlank()
                || txtUnidadesMinimas.getText().isBlank()
                || cmbTipoMueble.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Existen campos vacios en el formulario.");
            return;
        }
        String codigoMueble = txtCodigoMueble.getText().toUpperCase();
        String descripcion = txtDescripcion.getText().toUpperCase();
        int unidadesAlmacen = Integer.parseInt(txtUnidadesAlmacen.getText());
        int unidadesMinimas = Integer.parseInt(txtUnidadesMinimas.getText());
        float precioUnitario = Float.parseFloat(txtPrecioUnitario.getText());
        // Validar el tipo de mueble seleccionado
        String elegirMueble = cmbTipoMueble.getSelectedItem().toString();
        TipoMueble tipoMueble = null;
        switch (elegirMueble) {
            case "HOGAR":
                tipoMueble = TipoMueble.H;
                break;
            case "DESPACHO":
                tipoMueble = TipoMueble.D;
                break;
            case "COLEGIOS":
                tipoMueble = TipoMueble.C;
                break;
            default:
                JOptionPane.showMessageDialog(this, "Debe elegir un tipo de mueble.");
                return;
        }

        // Validamos una vez mas los campos para asegurarnos que no se graben datos incorrectos en el archivo
        if (!Patron.patronCodigo(codigoMueble)) {
            JOptionPane.showMessageDialog(this, "El campo 'Código' no cumple con el patrón necesario.");
            txtCodigoMueble.requestFocus();
        } else if (!Patron.patronAlfanumerico(descripcion)) {
            JOptionPane.showMessageDialog(this, "El campo 'Descripción' no cumple con el patrón necesario.");
            txtDescripcion.requestFocus();
        } else if (!Patron.patronNumeroEntero(unidadesAlmacen)) {
            JOptionPane.showMessageDialog(this, "El campo 'Unidades Almacén' no cumple con el patrón necesario.");
            txtUnidadesAlmacen.requestFocus();
        } else if (!Patron.patronNumeroEntero(unidadesMinimas)) {
            JOptionPane.showMessageDialog(this, "El campo 'Unidades Mínimas' no cumple con el patrón necesario.");
            txtUnidadesMinimas.requestFocus();
        } else if (!Patron.patronNumeroReal(precioUnitario)) {
            JOptionPane.showMessageDialog(this, "El campo 'Precio Unitario' no cumple con el patrón necesario.");
            txtPrecioUnitario.requestFocus();
        } else if (unidadesAlmacen < unidadesMinimas) {
            JOptionPane.showMessageDialog(this, "Las unidades de almacen no pueden ser menores de las unidades minimas.");
            txtPrecioUnitario.requestFocus();
        } else {
            // Buscamos el mueble en la lista
            mueble = buscarMueble(codigoMueble);
            if (mueble != null) {
                JOptionPane.showMessageDialog(this, "Ese codigo ya esta en la lista.");
                txtCodigoMueble.requestFocus();
                return;
            }
            mueble = llenarMueble(codigoMueble, descripcion, precioUnitario, unidadesAlmacen, unidadesMinimas, tipoMueble);
            listaMuebles.add(mueble);
            Collections.sort(listaMuebles);
            limpiarTabla(jTableListaMuebles);
            llenarTabla(listaMuebles, jTableListaMuebles);
            JOptionPane.showMessageDialog(this, "Mueble grabado.");

        }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // Obtenemos el texto ingresado en el campo de descripción
        String cadena = txtDescripcion.getText();

        // Verificamos si el campo está vacío
        if (cadena.isBlank()) {
            JOptionPane.showMessageDialog(this, "La descripción está vacía.");
            txtDescripcion.requestFocus();
        } else if (!Patron.patronAlfanumerico(cadena)) { // Verificamos si la descripción cumple con el patrón necesario utilizando el método patronAlfanumerico() de la clase Patron
            JOptionPane.showMessageDialog(this, "La descripción no cumple con el patrón necesario.");
            txtDescripcion.requestFocus();
        }

    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void btnLimpiarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarDatosActionPerformed
        limpiarFormulario();
    }//GEN-LAST:event_btnLimpiarDatosActionPerformed

    private void btnLimpiarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTodosActionPerformed
        limpiarTabla(jTableListaMuebles);

    }//GEN-LAST:event_btnLimpiarTodosActionPerformed

    private void txtCodigoMuebleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoMuebleActionPerformed
        // Obtenemos el texto ingresado en el campo de código
        String cadena = txtCodigoMueble.getText();

        // Verificamos si el campo está vacío
        if (cadena.isBlank()) {
            JOptionPane.showMessageDialog(this, "El código está vacío.");
            txtCodigoMueble.requestFocus();
        } else if (!Patron.patronCodigo(cadena)) { // Verificamos si el código cumple con el patrón necesario utilizando el método patronCodigo() de la clase Patron
            JOptionPane.showMessageDialog(this, "El código no cumple con el patrón necesario.");
            txtCodigoMueble.requestFocus();
        }

    }//GEN-LAST:event_txtCodigoMuebleActionPerformed

    private void txtPrecioUnitarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioUnitarioActionPerformed
        try {
            // Obtenemos el texto ingresado en el campo de precio unitario
            String cadena = txtPrecioUnitario.getText();

            // Verificamos si el campo está vacío
            if (cadena.isBlank()) {
                JOptionPane.showMessageDialog(this, "El precio está vacío.");
                txtPrecioUnitario.requestFocus();
                // Si el campo está vacío, no necesitamos continuar con la conversión y validación
                return;
            }

            // Convertimos el texto a un flotante
            float precio = Float.parseFloat(cadena);

            // Verificamos si el precio cumple con el patrón necesario
            if (!Patron.patronNumeroReal(precio)) {
                JOptionPane.showMessageDialog(this, "El precio no cumple con el patrón necesario.");
                txtPrecioUnitario.requestFocus();
            }
        } catch (NumberFormatException e) {
            // Capturamos cualquier excepción de formato numérico
            JOptionPane.showMessageDialog(this, "Error al convertir el valor numérico. Verifique que haya ingresado valores válidos.");
        } catch (Exception e) {
            // Capturamos cualquier otra excepción
            JOptionPane.showMessageDialog(this, "Ocurrió un error. Por favor, intente nuevamente.");
        }

    }//GEN-LAST:event_txtPrecioUnitarioActionPerformed

    private void txtUnidadesMinimasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnidadesMinimasActionPerformed
        try {
            // Obtenemos el texto ingresado en el campo de unidades mínimas
            String cadena = txtUnidadesMinimas.getText();

            // Verificamos si el campo está vacío
            if (cadena.isBlank()) {
                JOptionPane.showMessageDialog(this, "Las unidades mínimas están vacías.");
                txtUnidadesMinimas.requestFocus();
                // Si el campo está vacío, no necesitamos continuar con la conversión y validación
                return;
            }

            // Convertimos el texto a un entero
            int unidadesMinimas = Integer.parseInt(cadena);

            // Verificamos si las unidades mínimas cumplen con el patrón necesario
            if (!Patron.patronNumeroEntero(unidadesMinimas)) {
                JOptionPane.showMessageDialog(this, "Las unidades mínimas no cumplen con el patrón necesario.");
                txtUnidadesMinimas.requestFocus();
            }
        } catch (NumberFormatException e) {
            // Capturamos cualquier excepción de formato numérico (cuando no se puede convertir el texto a un número)
            JOptionPane.showMessageDialog(this, "Error al convertir el valor numérico. Verifique que haya ingresado valores válidos.");
        } catch (Exception e) {
            // Capturamos cualquier otra excepción
            JOptionPane.showMessageDialog(this, "Ocurrió un error. Por favor, intente nuevamente.");
        }

    }//GEN-LAST:event_txtUnidadesMinimasActionPerformed

    private void txtUnidadesAlmacenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnidadesAlmacenActionPerformed
        try {
            // Obtenemos el texto ingresado en el campo de unidades de almacén
            String unidadesAlmacenTexto = txtUnidadesAlmacen.getText();

            // Verificamos si el campo está vacío
            if (unidadesAlmacenTexto.isBlank()) {
                JOptionPane.showMessageDialog(this, "Las unidades del almacén están vacías.");
                txtUnidadesAlmacen.requestFocus();
                return; // Salimos del método si el campo está vacío
            }
            // Convertimos el texto a un entero
            int unidadesAlmacen = Integer.parseInt(unidadesAlmacenTexto);

            // Obtenemos el texto ingresado en el campo de unidades mínimas
            String unidadesMinimasTexto = txtUnidadesMinimas.getText();

            // Verificamos si el campo de unidades mínimas está vacío
            if (unidadesMinimasTexto.isBlank()) {
                JOptionPane.showMessageDialog(this, "Las unidades mínimas no pueden estar vacías.");
                txtUnidadesMinimas.requestFocus();
                return; // Salimos del método si el campo de unidades mínimas está vacío
            }
            // Convertimos el texto a un entero
            int unidadesMinimas = Integer.parseInt(unidadesMinimasTexto);

            // Obtenemos el texto ingresado en el campo de precio unitario
            String precioUnitarioTexto = txtPrecioUnitario.getText();

            // Verificamos si el campo de precio unitario está vacío
            if (precioUnitarioTexto.isBlank()) {
                JOptionPane.showMessageDialog(this, "El precio unitario no puede estar vacío.");
                txtPrecioUnitario.requestFocus();
                return; // Salimos del método si el campo de precio unitario está vacío
            }
            // Convertimos el texto a un flotante
            float precioUnitario = Float.parseFloat(precioUnitarioTexto);

            // Verificamos si las unidades de almacén cumplen con el patrón necesario
            if (!Patron.patronNumeroEntero(unidadesAlmacen)) {
                JOptionPane.showMessageDialog(this, "Las unidades del almacén no cumplen con el patrón necesario.");
                txtUnidadesAlmacen.requestFocus();
                return; // Salimos del método si las unidades de almacén no cumplen con el patrón
            }

            // Verificamos si las unidades de almacén son menores que las unidades mínimas
            if (unidadesAlmacen < unidadesMinimas) {
                JOptionPane.showMessageDialog(this, "Las unidades del almacén no pueden ser inferiores a las unidades mínimas.");
                txtUnidadesAlmacen.requestFocus();
                return; // Salimos del método si las unidades de almacén son menores que las unidades mínimas
            }

            // Si todas las validaciones fueron exitosas, establecemos el precio unitario y las unidades de almacén en el objeto mueble
            mueble.setPrecioUnitario(precioUnitario);
            mueble.setUnidadesAlmacen(unidadesAlmacen);
            // Calculamos el total de ventas
            float totalVentas = mueble.getTotalAlmacen();
            // Mostramos el total de ventas en el campo de texto correspondiente
            txtTotalVentas.setText(Float.toString(totalVentas));
        } catch (NumberFormatException e) {
            // Capturamos cualquier excepción de formato numérico
            JOptionPane.showMessageDialog(this, "Error al convertir el valor numérico. Verifique que haya ingresado valores válidos.");
        } catch (Exception e) {
            // Capturamos cualquier otra excepción
            JOptionPane.showMessageDialog(this, "Ocurrió un error. Por favor, intente nuevamente.");
        }

    }//GEN-LAST:event_txtUnidadesAlmacenActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            // Validar si el campo txtCodigo está vacío
            if (txtCodigoMueble.getText().isBlank()) {
                JOptionPane.showMessageDialog(this, "El codigo no puede estar vacío.");
                txtCodigoMueble.requestFocus();
                return;
            }

            // Obtener el valor del campo txtCodigo
            String codigoMueble = txtCodigoMueble.getText();

            // Busca el registro en el archivo
            mueble = buscarMueble(codigoMueble);
            if (mueble == null) {
                JOptionPane.showMessageDialog(this, "El mueble introducido no existe.");
                txtCodigoMueble.requestFocus();
            } else {
                visualizarMueble(mueble);
                int confirmacion = JOptionPane.showConfirmDialog(
                        this,
                        "¿Desea realmente borrar este registro?",
                        "Borrar Mueble",
                        JOptionPane.YES_NO_OPTION
                );
                if (confirmacion == JOptionPane.YES_OPTION) {
                    listaMuebles.remove(buscarMueble(codigoMueble));
                    Collections.sort(listaMuebles);
                    limpiarTabla(jTableListaMuebles);
                    llenarTabla(listaMuebles, jTableListaMuebles);
                    JOptionPane.showMessageDialog(this, "Mueble eliminado con éxito.");
                } else {
                    JOptionPane.showMessageDialog(this, "No se elimino el mueble.");
                }
            }

        } catch (InputMismatchException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "¡ERROR! El codigo debe ser un número entero de 5 cifras como maximo.");
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            // Validar si el campo txtCodigo está vacío
            if (txtCodigoMueble.getText().isBlank()) {
                JOptionPane.showMessageDialog(this, "El codigo no puede estar vacío.");
                txtCodigoMueble.requestFocus();
                return;
            }

            // Obtener el valor del campo txtCodigo
            String codigoMueble = txtCodigoMueble.getText();

            // Busca el registro en el archivo
            mueble = buscarMueble(codigoMueble);
            if (mueble == null) {
                JOptionPane.showMessageDialog(this, "El mueble introducido no existe.");
                txtCodigoMueble.requestFocus();
            } else {
                visualizarMueble(mueble);
            }

        } catch (InputMismatchException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "¡ERROR! El codigo debe ser un número entero de 5 cifras como maximo.");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            // Obtener los valores de los campos del formulario y convertirlos a mayúsculas
            String codigoMueble = txtCodigoMueble.getText().toUpperCase();
            String descripcion = txtDescripcion.getText().toUpperCase();
            int unidadesAlmacen = Integer.parseInt(txtUnidadesAlmacen.getText());
            int unidadesMinimas = Integer.parseInt(txtUnidadesMinimas.getText());
            float precioUnitario = Float.parseFloat(txtPrecioUnitario.getText());
            String elegirMueble = cmbTipoMueble.getSelectedItem().toString();
            TipoMueble tipoMueble = null;
            switch (elegirMueble) {
                case "HOGAR":
                    tipoMueble = TipoMueble.H;
                    break;
                case "DESPACHO":
                    tipoMueble = TipoMueble.D;
                    break;
                case "COLEGIOS":
                    tipoMueble = TipoMueble.C;
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Debe elegir un tipo de mueble.");
                    return;
            }

            // Validar si hay campos vacíos en el formulario
            if (txtCodigoMueble.getText().isBlank()
                    || txtPrecioUnitario.getText().isBlank()
                    || txtDescripcion.getText().isBlank()
                    || txtUnidadesAlmacen.getText().isBlank()
                    || txtUnidadesMinimas.getText().isBlank()
                    || cmbTipoMueble.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Existen campos vacios en el formulario.");
                return;
            }

            // Mostrar un mensaje de confirmación para modificar el registro
            int confirmacion = JOptionPane.showConfirmDialog(
                    this,
                    "¿Quieres modificar este registro?",
                    "Modificar Mueble",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirmacion == JOptionPane.YES_OPTION) {
                // Verificar que existe el mueble
                mueble = buscarMueble(codigoMueble);
                if (mueble == null) {
                    JOptionPane.showMessageDialog(this, "Este codigo no esta registrado.");
                    return;
                }

                // Preguntar si se quiere modificar el código del mueble
                int cambiarCodigo = JOptionPane.showConfirmDialog(
                        this,
                        "¿Quieres modificar el codigo?",
                        "Modificar codigo",
                        JOptionPane.YES_NO_OPTION
                );

                if (cambiarCodigo == JOptionPane.YES_OPTION) {
                    // Si se quiere cambiar el código, eliminar el mueble de la lista y solicitar el nuevo código
                    // para poder actualizar la lista correctamente
                    listaMuebles.remove(mueble);
                    // Se solicita el nuevo codigo
                    String nuevoCodigo = JOptionPane.showInputDialog(this,
                            "Introduzca el nuevo código del mueble:",
                            "Modificar Mueble",
                            JOptionPane.QUESTION_MESSAGE).toUpperCase();
                    
                    txtCodigoMueble.setText(nuevoCodigo);
                    // buscar si el codigo nuevo esta en uso
                    mueble = buscarMueble(nuevoCodigo);
                    if (mueble != null) {
                        JOptionPane.showMessageDialog(this, "El codigo introducido ya existe.");
                        txtCodigoMueble.requestFocus();
                        return;
                    }
                    codigoMueble = txtCodigoMueble.getText().toUpperCase();
                }

                // Validar los campos del formulario
                if (!Patron.patronCodigo(codigoMueble)) {
                    JOptionPane.showMessageDialog(this, "El campo 'Código' no cumple con el patrón necesario.");
                    txtCodigoMueble.requestFocus();
                } else if (!Patron.patronAlfanumerico(descripcion)) {
                    JOptionPane.showMessageDialog(this, "El campo 'Descripción' no cumple con el patrón necesario.");
                    txtDescripcion.requestFocus();
                } else if (!Patron.patronNumeroEntero(unidadesAlmacen)) {
                    JOptionPane.showMessageDialog(this, "El campo 'Unidades Almacén' no cumple con el patrón necesario.");
                    txtUnidadesAlmacen.requestFocus();
                } else if (!Patron.patronNumeroEntero(unidadesMinimas)) {
                    JOptionPane.showMessageDialog(this, "El campo 'Unidades Mínimas' no cumple con el patrón necesario.");
                    txtUnidadesMinimas.requestFocus();
                } else if (!Patron.patronNumeroReal(precioUnitario)) {
                    JOptionPane.showMessageDialog(this, "El campo 'Precio Unitario' no cumple con el patrón necesario.");
                    txtPrecioUnitario.requestFocus();
                } else {
                    // Si los campos son válidos, proceder a modificar el mueble
                    if (mueble == null) {
                        // Si el mueble no existe, crear uno nuevo y añadirlo a la lista
                        Mueble muebleModificado = llenarMueble(codigoMueble, descripcion, precioUnitario, unidadesAlmacen, unidadesMinimas, tipoMueble);
                        listaMuebles.add(muebleModificado);
                    } else {
                        // Si el mueble existe, modificar sus atributos
                        mueble.setCodigoMueble(codigoMueble);
                        mueble.setDescripMueble(descripcion);
                        mueble.setPrecioUnitario(precioUnitario);
                        mueble.setUnidadesAlmacen(unidadesAlmacen);
                        mueble.setUnidadesMinimas(unidadesMinimas);
                        mueble.setTipoMueble(tipoMueble);
                    }
                    // Ordenar la lista de muebles, limpiar y llenar la tabla, y mostrar un mensaje de éxito
                    Collections.sort(listaMuebles);
                    limpiarTabla(jTableListaMuebles);
                    llenarTabla(listaMuebles, jTableListaMuebles);
                    JOptionPane.showMessageDialog(this, "Mueble modificado con éxito.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se modifico el mueble.");
            }
        } catch (NumberFormatException e) {
            // Capturamos cualquier excepción de formato numérico
            JOptionPane.showMessageDialog(this, "Error al convertir el valor numérico. Verifique que haya ingresado valores válidos.");
        } catch (Exception e) {
            // Capturamos cualquier otra excepción
            JOptionPane.showMessageDialog(this, "Ocurrió un error. Por favor, intente nuevamente.");
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnVisualizarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarTodosActionPerformed
        limpiarTabla(jTableListaMuebles);
        llenarTabla(listaMuebles, jTableListaMuebles);
    }//GEN-LAST:event_btnVisualizarTodosActionPerformed

    // limpia el formulario
    private void limpiarFormulario() {
        txtCodigoMueble.setText("");
        txtDescripcion.setText("");
        txtPrecioUnitario.setText("");
        txtUnidadesAlmacen.setText("");
        txtUnidadesMinimas.setText("");
        txtTotalVentas.setText("");
        cmbTipoMueble.setSelectedIndex(0);
    }

    // limpia la tabla
    private void limpiarTabla(JTable jt) {
        DefaultTableModel model = (DefaultTableModel) jt.getModel();

        model.setRowCount(0); // Elimina todas las filas del modelo

    }

    // metodo para buscar muebles
    private Mueble buscarMueble(String codigo) {
        for (Mueble mueble : listaMuebles) {
            if (mueble.getCodigoMueble().equalsIgnoreCase(codigo)) {

                return mueble;
            }
        }
        return null;
    }

    private Mueble llenarMueble(String codigo, String descripcion, float precio,
            int unidadesAlmacen, int unidadesMinimas, TipoMueble tipoMueble) {
        Mueble m = new Mueble(codigo, descripcion, precio, unidadesAlmacen, unidadesMinimas, tipoMueble);
        return m;
    }
    
    // Método para llenar una tabla (JTable) con los datos de una matriz
    private void llenarTabla(ArrayList<Mueble> lista, JTable jt) {

        // Creamos un nuevo modelo de tabla (DefaultTableModel) con la dimensión de la matriz
        DefaultTableModel model = (DefaultTableModel) jt.getModel();

        // Agregar las filas al modelo
        for (Mueble mueble : lista) {
            model.addRow(new Object[]{
                mueble.getCodigoMueble(),
                mueble.getDescripMueble(),
                mueble.getPrecioUnitario(),
                mueble.getUnidadesMinimas(),
                mueble.getUnidadesAlmacen(),
                mueble.getTipoMueble().getTipoMuebleCompleto(),
                mueble.getTotalAlmacen()});
        }

        // Establecemos el modelo de tabla creado en la tabla proporcionada
        jt.setModel(model);
    }

    // Visualizar los datos del mueble en los campos de la ventana
    private void visualizarMueble(Mueble mueble) {
        txtCodigoMueble.setText(String.valueOf(mueble.getCodigoMueble()));
        txtDescripcion.setText(mueble.getDescripMueble());
        txtPrecioUnitario.setText(String.valueOf(mueble.getPrecioUnitario()));
        txtUnidadesAlmacen.setText(String.valueOf(mueble.getUnidadesAlmacen()));
        txtUnidadesMinimas.setText(String.valueOf(mueble.getUnidadesMinimas()));
        cmbTipoMueble.setSelectedItem(mueble.getTipoMueble().getTipoMuebleCompleto());
        txtTotalVentas.setText(String.valueOf(mueble.getTotalAlmacen()));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppGestionMuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppGestionMuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppGestionMuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppGestionMuebles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppGestionMuebles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnBuscar;
    private javax.swing.JToggleButton btnEliminar;
    private javax.swing.JToggleButton btnInsertar;
    private javax.swing.JButton btnLimpiarDatos;
    private javax.swing.JToggleButton btnLimpiarTodos;
    private javax.swing.JToggleButton btnModificar;
    private javax.swing.JToggleButton btnSalir;
    private javax.swing.JToggleButton btnVisualizarTodos;
    private javax.swing.JComboBox<String> cmbTipoMueble;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableListaMuebles;
    private javax.swing.JTextField txtCodigoMueble;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtPrecioUnitario;
    private javax.swing.JTextField txtTotalVentas;
    private javax.swing.JTextField txtUnidadesAlmacen;
    private javax.swing.JTextField txtUnidadesMinimas;
    // End of variables declaration//GEN-END:variables

}
